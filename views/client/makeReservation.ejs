<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="icon" href="/images/outline_icon.png" type="image/png">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= restaurantName %></title>
    <link href="/css/output.css" rel="stylesheet">
</head>
<body>
    <main class="mt-20 ml-20 mr-20 mb-20">
        <div class="relative w-100 h-96 overflow-hidde mb-5"><img src="<%= restaurantPic %>" class="absolute w-full h-full object-cover"></div>
        <div id="restaurant-name" class="text-6xl mb-3"><%= restaurantName %></div>
        <div id="restaurant-address" class="mb-3"><%= restaurantAddress %></div>
        <div id="restaurant-phone" class="flex mb-3">
            <img src="/images/phone.png" class="w-5 h-5 mr-2">
            <a href="tel:<%= restaurantPhone %>" class="flex-2"><%= restaurantPhone %></a>
        </div>
        <hr>
        <div id="booking-selector" class="flex w-full mb-10 mt-6">
            <div id="diner-field" class="flex-shrink-0 mr-3">
                <div class="field-label mb-5 text-lg">用餐人數</div>
                <select id="adult-selector" class="border border-1 border-solid border-gray-300 w-64 h-10 rounded-md mr-3"></select>
                <select id="child-selector" class="border border-1 border-solid border-gray-300 w-64 h-10 rounded-md"></select>
            </div>
            <div id="date-field" class="flex-grow">
                <div class="mb-5 text-lg">用餐日期</div>
                <input type="date" id="date-selector" class="border border-1 border-solid border-gray-300 w-full h-10 rounded-md">
            </div>
        </div>        
        <hr>
        <div id="booking-time" class="mt-10 mb-10">
            <div class="field-label mb-5 text-lg">用餐時段</div>
            <div id="time-field" class="flex flex-wrap"></div>
        </div>
        <hr>
        <form class="space-y-4 mt-10">
            <div class="text-lg mb-10">訂位人資訊</div>
            <!-- 訂位人資訊 -->
            <div class="flex items-center space-x-4">
                <div class="flex items-center">
                    <label for="name" class="block text-base font-medium text-gray-700 mr-3 w-40">訂位人資訊 (必填)</label>
                    <input type="text" id="name" name="name" required class="flex-grow border border-gray-300 rounded-sm shadow-sm h-8">
                </div>
            
                <!-- radio 選項 -->
                <div>
                    <label class="inline-flex items-center">
                        <input type="radio" name="title" value="小姐" class="text-orange-500">
                        <span class="ml-2">小姐</span>
                    </label>
                    <label class="inline-flex items-center ml-6">
                        <input type="radio" name="title" value="先生" class="text-orange-500">
                        <span class="ml-2">先生</span>
                    </label>
                    <label class="inline-flex items-center ml-6">
                        <input type="radio" name="title" value="其他" class="text-orange-500">
                        <span class="ml-2">其他</span>
                    </label>
                </div>
            </div>
        
            <!-- 手機號碼 -->
            <div class="flex items-center mt-2">
                <label for="phone" class="block text-base font-medium text-gray-700 mr-3 w-40">訂位人手機號碼 (必填)</label>
                <input type="tel" id="phone" name="phone" required class="flex-grow border border-gray-300 rounded-sm shadow-sm h-8">
            </div>
            
            <!-- Email -->
            <div class="flex items-center mt-2">
                <label for="email" class="block text-base font-medium text-gray-700 mr-3 w-40">訂位人 email (必填)</label>
                <input type="email" id="email" name="email" required class="flex-grow border border-gray-300 rounded-sm shadow-sm h-8">
            </div>
        
            <!-- 用餐目的 -->
            <div>
                <span class="block text-base font-medium text-gray-700 mb-5">用餐目的</span>
                <div class="mt-2 space-x-2">
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="生日" class="hidden" />
                        <span>生日</span>
                    </label>
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="家庭聚餐" class="hidden" />
                        <span>家庭聚餐</span>
                    </label>
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="情人約會" class="hidden" />
                        <span>情人約會</span>
                    </label>
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="結婚紀念" class="hidden" />
                        <span>結婚紀念</span>
                    </label>
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="朋友聚餐" class="hidden" />
                        <span>朋友聚餐</span>
                    </label>
                    <label class="purpose-label border border-gray-300 rounded-md px-3 py-2 text-sm font-medium text-gray-700 hover:cursor-pointer">
                        <input type="radio" name="purpose" value="商務聚餐" class="hidden" />
                        <span>商務聚餐</span>
                    </label>
                </div>
            </div>
        
            <!-- 其他備註 -->
            <div>
                <label for="note" class="block text-base font-medium text-gray-700">其他備註</label>
                <textarea id="note" name="note" rows="3" maxlength="400" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm"></textarea>
            </div>
        </form>
        <button id="make-reservation" class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded hover:shadow-lg transition duration-200 ease-in-out w-full mt-5">確認訂位</button>
    </main>

    <div id="chat-container" class="fixed bottom-10 right-10 bg-white rounded-lg shadow-xl transform scale-0 transition-transform duration-300 ease-in-out w-96">
        <div class="bg-gray-200 p-2 flex justify-between items-center rounded-t-lg shadow-sm">
            <span class="font-semibold text-lg">AI 客服</span>
            <button id="close-chat" class="text-gray-600 hover:text-gray-800 rounded-full text-lg font-bold p-1">x</button>
        </div>
        <div id="chat-box" class="overflow-y-auto h-64 mb-4 space-y-2 p-2 shadow-inner">
        </div>
        <div class="p-2 flex items-center gap-2">
            <input type="text" id="chat-input" class="border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 flex-grow p-2 rounded-l-md transition duration-200 ease-in-out" placeholder="輸入問題...">
            <button id="send-message" class="bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 text-white px-4 py-2 rounded-r-md transition duration-200 ease-in-out">送出</button>
        </div>
    </div>
    <button id="toggle-chat" class="fixed bottom-10 right-10 bg-blue-500 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 text-white p-4 rounded-full transition-colors duration-300 ease-in-out">AI 客服</button>
    
    
    
    

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const pathSegments = window.location.pathname.split('/')
        const restaurantId = pathSegments[2]
        const maxPersonPerGroup = <%- JSON.stringify(maxPersonPerGroup) %>

        function initializeSelectors() {
            for (let i = 1; i <= maxPersonPerGroup; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.text = i + '位大人';
                document.getElementById('adult-selector').appendChild(option);
                if (i === 2) {
                    option.selected = true;
                }
            }

            updateChildSelector(1);
        }

        function updateChildSelector(adultCount) {
            const childSelector = document.getElementById('child-selector');
            childSelector.innerHTML = '';

            const maxChildren = maxPersonPerGroup - adultCount;
            for (let i = 0; i <= maxChildren; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.text = i + '位小孩';
            childSelector.appendChild(option);
            }
        }

        document.getElementById('adult-selector').addEventListener('change', function () {
            updateChildSelector(parseInt(this.value, 10));
        });

        document.getElementById('child-selector').addEventListener('change', function () {
            const adultSelector = document.getElementById('adult-selector');
            const selectedChildren = parseInt(this.value, 10);
            const maxAdults = maxPersonPerGroup - selectedChildren;
            const currentAdultSelection = parseInt(adultSelector.value, 10);
            adultSelector.innerHTML = '';
            for (let i = 1; i <= maxAdults; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.text = i + '位大人';
                adultSelector.appendChild(option);
                if (i === currentAdultSelection) {
                    option.selected = true;
                }
            }
            if (currentAdultSelection > maxAdults) {
                adultSelector.value = maxAdults;
            }
        });

        initializeSelectors();

        const maxBookingDay = <%- JSON.stringify(maxBookingDay) %>
        const dateSelector = document.getElementById('date-selector');
        const today = new Date();
        dateSelector.valueAsDate = today;
        dateSelector.min = today.toISOString().split('T')[0];
        const maxDate = new Date();
        maxDate.setDate(maxDate.getDate() + maxBookingDay);
        dateSelector.max = maxDate.toISOString().split('T')[0];

        document.addEventListener('DOMContentLoaded', async () => {
            const dateSelector = document.getElementById('date-selector');
            const adultSelector = document.getElementById('adult-selector');
            const childSelector = document.getElementById('child-selector');
            const timeField = document.getElementById('time-field');
            let availableSeatsData
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            dateSelector.value = tomorrow.toISOString().split('T')[0];

            async function fetchAndUpdateAvailableTimes() {
                try {
                    const response = await axios.get(`/api/restaurant/${restaurantId}/availableSeats?date=${dateSelector.value}`);
                    availableSeatsData = response.data.data;

                    updateAvailableTimes();
                } catch (err) {
                    console.log(err);
                }
            }

            function updateAvailableTimes() {
                const adultCount = parseInt(adultSelector.value, 10) || 0;
                const childCount = parseInt(childSelector.value, 10) || 0;
                const totalCount = adultCount + childCount;
                const largerTableSize = availableSeatsData
                    .map(option => option.max_person)
                    .filter(size => size > totalCount)
                    .sort((a, b) => a - b)[0];
                const suitableOption = availableSeatsData.find(option =>
                    option.max_person >= totalCount && (!largerTableSize || option.max_person < largerTableSize)
                );
                timeField.innerHTML = '';

                if (suitableOption) {
                    suitableOption.available_time.forEach(time => {
                        const label = document.createElement('label');
                        label.classList.add("border", "p-2", "cursor-pointer", "rounded-md", "mr-2", "mb-2", "w-32", "flex", "justify-center", "items-center", "text-center")

                        const radioButton = document.createElement('input');
                        radioButton.setAttribute('type', 'radio');
                        radioButton.setAttribute('name', 'bookingTime');
                        radioButton.setAttribute('value', time);
                        radioButton.classList.add("hidden");
                        label.addEventListener('click', () => {
                            document.querySelectorAll('#time-field label').forEach(el => {
                                el.classList.remove("bg-orange-500", "text-white");
                            });
                            label.classList.add("bg-orange-500", "text-white");
                        });

                        label.appendChild(radioButton);

                        const timeText = document.createTextNode(time);
                        label.appendChild(timeText);

                        document.getElementById('time-field').appendChild(label);
                    });
                } else {
                    const timeDiv = document.createElement('div');
                    timeDiv.textContent = '沒有可預約的時間';
                    timeField.appendChild(timeDiv);
                }
            }

            fetchAndUpdateAvailableTimes();
            adultSelector.addEventListener('change', updateAvailableTimes);
            childSelector.addEventListener('change', updateAvailableTimes);
            dateSelector.addEventListener('change', fetchAndUpdateAvailableTimes);
        });

        document.querySelectorAll('.purpose-label input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.purpose-label').forEach(label => {
                    label.classList.remove("bg-orange-500", "text-white");
                });
                if (this.checked) {
                    this.parentNode.classList.add("bg-orange-500", "text-white");
                }
            });
        });

        document.getElementById('make-reservation').addEventListener('click', makeReservation);
        async function makeReservation() {
            try {
                const adult = document.querySelector('#adult-selector').value;
                const child = document.querySelector('#child-selector').value;
                const diningDate = document.querySelector('#date-selector').value;
                const diningTimeRadio = document.querySelector('input[name="bookingTime"]:checked');
                const name = document.querySelector('#name').value;
                const genderRadio = document.querySelector('input[name="title"]:checked');
                const phone = document.querySelector('#phone').value;
                const email = document.querySelector('#email').value;
                const purposeRadio = document.querySelector('input[name="purpose"]:checked');
                const note = document.querySelector('#note').value;

                // Check if all required fields are filled out
                if (!name) {
                    alert('請填寫訂位人姓名');
                    return;
                }
                if (!genderRadio) {
                    alert('請選擇稱謂');
                    return;
                }
                if (!phone) {
                    alert('請填寫手機號碼');
                    return;
                }
                const phoneRegex = /^09\d{8}$/
                if (!phoneRegex.test(phone)) {
                    alert('手機號碼格式不正確')
                    return
                }
                if (!email) {
                    alert('請填寫 Email');
                    return;
                }
                const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/
                if (!emailPattern.test(email)) {
                    alert('信箱格式不正確')
                    return
                }
                if (!diningTimeRadio) {
                    alert('請選擇用餐時段');
                    return;
                }
                
                let purpose = null
                if (purposeRadio) {
                    purpose = purposeRadio.value
                }

                const response = await axios.post(`/api/restaurant/${restaurantId}/reservation/click`,{
                    "adult": parseInt(adult, 10),
                    "child": parseInt(child, 10),
                    "diningDate": diningDate,
                    "diningTime": diningTimeRadio.value,
                    "name": name,
                    "gender": genderRadio.value,
                    "phone": phone,
                    "email": email,
                    "purpose": purpose,
                    "note": note
                });
                alert(response.data.message)
                location.href = location.href
            } catch (err) {
                alert(err.response.data.error)
            }
        }

        // chat bot
        async function callCustomerService(userInput) {
            try {
                const response = await axios.post(`/api/restaurant/${restaurantId}/customerService`, {
                    restaurantId,
                    userInput,
                })

                if (response.data && response.data.message) {
                    handleServerResponse(response.data.message);
                }
            } catch (err) {
                console.log(err.response.data.error)
            }
        }

        function addMessageToChat(message, isUserMessage) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            if (isUserMessage) {
                messageElement.classList.add('user-message');
            } else {
                messageElement.classList.add('server-message');
            }
            const chatBox = document.querySelector('#chat-box');
            chatBox.appendChild(messageElement);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function handleServerResponse(response) {
            addMessageToChat(response, false);
        }

        document.querySelector('#chat-input').addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const userInput = document.querySelector('#chat-input').value;

                if (userInput.trim() !== '') {
                    addMessageToChat(userInput, true);
                    callCustomerService(userInput);
                    document.querySelector('#chat-input').value = '';
                }
            }
        });

        document.querySelector('#send-message').addEventListener('click', function() {
            const userInput = document.querySelector('#chat-input').value;

            if (userInput.trim() !== '') {
                addMessageToChat(userInput, true);
                callCustomerService(userInput);
                document.querySelector('#chat-input').value = '';
            }
        });

        document.querySelector('#toggle-chat').addEventListener('click', function() {
            const chatContainer = document.querySelector('#chat-container');
            const toggleChatButton = document.querySelector('#toggle-chat');
            chatContainer.classList.remove('scale-0', 'chat-pop-out');
            chatContainer.classList.add('scale-100', 'chat-pop-in');
            toggleChatButton.classList.add('hidden');
        });

        document.querySelector('#close-chat').addEventListener('click', function() {
            const chatContainer = document.querySelector('#chat-container');
            const toggleChatButton = document.querySelector('#toggle-chat');
            chatContainer.classList.remove('scale-100', 'chat-pop-in');
            chatContainer.classList.add('scale-0', 'chat-pop-out');
            setTimeout(() => toggleChatButton.classList.remove('hidden'), 300); // Delay to match animation duration
        });
    </script>
</body>
</html>